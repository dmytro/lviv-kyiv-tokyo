#!/usr/bin/perl -w

# Copyright © 2000 
# Dmytro Koval'ov <kov@tokyo.email.ne.jp>, 2000
# v. 0.1 2000 01 18, First release
# v. 0.2 2000 01 21
#    added command line processing,fixed writing of uk.messages
#
# Havily used functions from Po::Files.pm by:
# 
# Copyright © 1998 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 1998.
#
##? Takes several PO files and/or *.messages file and merges them into *.messages file, 
##? sorted by msgid. Outputs to STOUT.
#


use strict;

my $messages = "./uk.messages";
my @POFILE;

NEXT_ARG:
while (my $arg = shift) {
##? po-to-messages [<OPTRIONS>] [PO-FILE]
##? Command line options:
##? 
    ( $arg =~ /^-m$/ ) && 
##? -m <PATH> 
##?     path to message file. If not present 
##?     uses ./uk.messages
	do {  &usage ("No file name") # exit if empty name
		  if (($messages = shift) eq "");
	      next  NEXT_ARG;;
	  };
    $POFILE[++$#POFILE] = $arg;
}

$POFILE[0] = '-' if ($#POFILE == -1 );


my $entries;
my %entries = ();

for my $pofile (@POFILE) {
    &po_read_hash ($pofile);
}


# always read messages from *.messages file last
if (-f $messages ) {
    &po_read_hash ($messages);
} else {
    warn ("No messages file: $! \n Creating new file: $messages.\n");
    warn("Hope it's OK\n");
};

open STDOUT, ">$messages" or
    die "Can't open $messages for updating: $!";
for my $key (sort keys %entries) {
    unless ($key eq "" or $entries {$key} eq "") {
	print &requote('msgid', $key);
	print &requote('msgstr', $entries {$key}), "\n";
    }
}
close STDOUT;
exit 0;

sub po_read_hash {
    my ($name) = @_;
    my $entries = [];
    my $entry = {};
    my $type = '';
    my $msgid = '';
    my $msgstr = '';

    open PO_FILE, $name or die "* $name: $!\n";
    while (<PO_FILE>) {
	s/\cM$//;

	my $obsolete = /^\#~/;
	# FIXME: Better study the obsoleteness of an obsolete entry.

	s/[ \t]+$//;

	s/\#~ *// if $obsolete;
	next if /^$/;

	if (/^\#/) {
	    if ($type eq 'msgstr') {
		$entry->{'msgid'} = &unquote ($msgid);
		$entry->{'msgstr'} = &unquote ($msgstr);
		$entries {&unquote ($msgid)} = &unquote ($msgstr);

		$entry = {};
		$type = '';
	    }
	    $entry->{'obsolete'} = 1 if $obsolete;
	    if (/^\#[ \t\n]/) {
		if (defined $entry->{'comment'}) {
		    $entry->{'comment'} .= $_;
		} else {
		    $entry->{'comment'} = $_;
		}
	    } elsif (/^\#\./) {
		if (defined $entry->{'quote'}) {
		    $entry->{'quote'} .= $_;
		} else {
		    $entry->{'quote'} = $_;
		}
	    } elsif (/^\#:/) {
		if (defined $entry->{'refs'}) {
		    $entry->{'refs'} .= $_;
		} else {
		    $entry->{'refs'} = $_;
		}
	    } elsif (/^\#,/) {
		if (defined $entry->{'flags'}) {
		    $entry->{'flags'} .= $_;
		} else {
		    $entry->{'flags'} = $_;
		}
	    } else {
		warn "$name:$.: Unrecognised line\n";
	    }
	} elsif (/^msgid/) {
	    if ($type eq 'msgstr') {
		$entry->{'msgid'} = &unquote ($msgid);
		$entry->{'msgstr'} = &unquote ($msgstr);
		$entries {&unquote ($msgid)} = &unquote ($msgstr); ###dk
		$entry = {};
	    }
	    $entry->{'obsolete'} = 1 if $obsolete;
	    $type = 'msgid';
	    $msgid = $_;
	} elsif (/^msgstr/) {
	    $entry->{'obsolete'} = 1 if $obsolete;
	    $type = 'msgstr';
	    $msgstr = $_;
	} elsif (/^[ \t]*\"/) {
	    $entry->{'obsolete'} = 1 if $obsolete;
	    if ($type eq 'msgid') {
		$msgid .= $_;
	    } elsif ($type eq 'msgstr') {
		$msgstr .= $_;
	    } else {
		warn "$name:$.: Unrecognised line\n";
	    }
	} else {
	    warn "$name:$.: Unrecognised line\n";
	}
    }
    close PO_FILE;

    if ($type eq 'msgstr') {
	$entry->{'msgid'} = &unquote ($msgid);
	$entry->{'msgstr'} = &unquote ($msgstr);
	$entries {&unquote ($msgid)} = &unquote ($msgstr);
    }

    %entries;
}

sub requote {
    my ($type, $string) = @_;
    my $multi = $string =~ /[^\n]\n+[^\n]/;

    $string =~ s/\\/\\\\/g;
    $string =~ s/\"/\\\"/g;
    $string =~ s/\a/\\a/g;
    $string =~ s/\010/\\b/g;
    $string =~ s/\f/\\f/g;
    if ($multi) {
	$string =~ s/\n/\\n\"\n\"/g;
	$string =~ s/\"\n\"$//;
    } else {
	$string =~ s/\n/\\n/g;
    }
    $string =~ s/\t/\\t/g;

    $type . ($multi ? " \"\"\n\"" : ' "') . $string . "\"\n";
}



sub unquote {
    my ($string) = @_;

    $string =~ s/^[^\"]+\"(.*)\"[^\"]*\n$/$1/s;
    $string =~ s/\"[ \t]*\\?\n(\#~)?[ \t]*\"//g;
    $string =~ s/\\[ \t]*\n//g;

    my $result = '';
    while ($string =~ /\\([abfnt\"\\]|[0-7]+)/) {
	$result .= $` . ($1 eq 'a' ? "\a"
			 : $1 eq 'b' ? "\b"
			 : $1 eq 'f' ? "\f"
			 : $1 eq 'n' ? "\n"
			 : $1 eq 't' ? "\t"
			 : $1 eq '"' ? '"'
			 : $1 eq '\\' ? '\\'
			 : sprintf '%c', oct $1);
	$string = $';
    }

    $result . $string;
}

#------------------------------------------------------------
# Prints usage message end exits
#
sub usage () {
    my $msg = shift;
    my $iam;
    chomp ($iam = `basename $0`);
    print "$iam: $msg \n", '-' x 40, "\n\n";
    print "    Usage :  $iam  [parameters]\n\n";
    if (open USAGE, "$0") {
	while (<USAGE>) {
	    (/^##\?(.*)$/) && do {
		print $1, "\n";
	 }}
	close USAGE; }
    else {
	print "Error: Can't open file $0 for reading: $!";
    }
    exit 1;
}
